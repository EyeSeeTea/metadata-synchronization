import { Namespace } from "../../../data/storage/Namespaces";
import { UseCase } from "../../common/entities/UseCase";
import { RepositoryFactory } from "../../common/factories/RepositoryFactory";
import { Instance } from "../../instance/entities/Instance";
import { MetadataModule } from "../entities/MetadataModule";
import { BaseModule, Module } from "../entities/Module";

export class ListModulesUseCase implements UseCase {
    constructor(private repositoryFactory: RepositoryFactory, private localInstance: Instance) {}

    public async execute(
        bypassSharingSettings = false,
        instance = this.localInstance,
        includeAutogenerated = false
    ): Promise<Module[]> {
        const storageClient = await this.repositoryFactory
            .configRepository(instance)
            .getStorageClient();

        const userGroups = await this.repositoryFactory
            .instanceRepository(this.localInstance)
            .getUserGroups();
        const { id: userId } = await this.repositoryFactory
            .instanceRepository(this.localInstance)
            .getUser();

        const data = (
            await storageClient.listObjectsInCollection<BaseModule>(Namespace.MODULES)
        ).filter(module => includeAutogenerated || !module.autogenerated);

        return data
            .map(module => {
                switch (module.type) {
                    case "metadata":
                        return MetadataModule.build(module);
                    default:
                        throw new Error("Unknown module");
                }
            })
            .filter(
                module => bypassSharingSettings || module.hasPermissions("read", userId, userGroups)
            );
    }
}
